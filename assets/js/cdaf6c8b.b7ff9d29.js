"use strict";(self.webpackChunkranked_realm_docs=self.webpackChunkranked_realm_docs||[]).push([[72],{7872:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ROL/database-auth","title":"Database Authentication & Permissions","description":"This document outlines the database schema and policies related to authentication and permissions in the Supabase database.","source":"@site/docs/ROL/database-auth.md","sourceDirName":"ROL","slug":"/ROL/database-auth","permalink":"/docs/ROL/database-auth","draft":false,"unlisted":false,"editUrl":"https://github.com/Ranking-Of-Legends/rankedrealmdocs.github.io/tree/main/packages/create-docusaurus/templates/shared/docs/ROL/database-auth.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Authentication Documentation","permalink":"/docs/ROL/authentication"}}');var s=r(4848),l=r(8453);const a={},t="Database Authentication & Permissions",c={},o=[{value:"Schema Overview",id:"schema-overview",level:2},{value:"Staff Members Table",id:"staff-members-table",level:3},{value:"Organization Members Table",id:"organization-members-table",level:3},{value:"Role Enums",id:"role-enums",level:2},{value:"Staff Roles",id:"staff-roles",level:3},{value:"Organization Roles",id:"organization-roles",level:3},{value:"Row Level Security (RLS) Policies",id:"row-level-security-rls-policies",level:2},{value:"Staff Members Policies",id:"staff-members-policies",level:3},{value:"Organization Members Policies",id:"organization-members-policies",level:3},{value:"Organization Policies",id:"organization-policies",level:3},{value:"Helper Functions",id:"helper-functions",level:2},{value:"Role Checking Functions",id:"role-checking-functions",level:3},{value:"Access Control Matrix",id:"access-control-matrix",level:2},{value:"Staff Roles Access",id:"staff-roles-access",level:3},{value:"Organization Roles Access",id:"organization-roles-access",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"database-authentication--permissions",children:"Database Authentication & Permissions"})}),"\n",(0,s.jsx)(n.p,{children:"This document outlines the database schema and policies related to authentication and permissions in the Supabase database."}),"\n",(0,s.jsx)(n.h2,{id:"schema-overview",children:"Schema Overview"}),"\n",(0,s.jsx)(n.h3,{id:"staff-members-table",children:"Staff Members Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE staff_members (\r\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\r\n    user_id UUID REFERENCES auth.users NOT NULL,\r\n    role staff_role NOT NULL,\r\n    organization_id UUID REFERENCES organizations,\r\n    created_at TIMESTAMPTZ DEFAULT NOW(),\r\n    updated_at TIMESTAMPTZ DEFAULT NOW(),\r\n    UNIQUE(user_id, organization_id)\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"organization-members-table",children:"Organization Members Table"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE org_members (\r\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\r\n    user_id UUID REFERENCES auth.users NOT NULL,\r\n    organization_id UUID REFERENCES organizations NOT NULL,\r\n    role org_role NOT NULL,\r\n    created_at TIMESTAMPTZ DEFAULT NOW(),\r\n    updated_at TIMESTAMPTZ DEFAULT NOW(),\r\n    UNIQUE(user_id, organization_id)\r\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"role-enums",children:"Role Enums"}),"\n",(0,s.jsx)(n.h3,{id:"staff-roles",children:"Staff Roles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TYPE staff_role AS ENUM (\r\n    'owner',                 -- ROL platform owner\r\n    'platform_admin',        -- ROL platform administrator\r\n    'customer_service',      -- ROL customer support\r\n    'tournament_director',   -- ROL tournament management\r\n    'tournament_coordinator',\r\n    'league_director',       -- ROL league management\r\n    'league_coordinator'\r\n);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"organization-roles",children:"Organization Roles"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"CREATE TYPE org_role AS ENUM (\r\n    'org_owner',            -- Esports organization owner\r\n    'org_manager',          -- Esports organization manager\r\n    'org_staff'             -- Esports organization staff\r\n);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"row-level-security-rls-policies",children:"Row Level Security (RLS) Policies"}),"\n",(0,s.jsx)(n.h3,{id:"staff-members-policies",children:"Staff Members Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Viewing staff members\r\nCREATE POLICY \"Staff members viewable by authenticated users\"\r\n    ON staff_members FOR SELECT\r\n    USING (auth.role() = 'authenticated');\r\n\r\n-- Managing staff members\r\nCREATE POLICY \"Staff managed by owner\"\r\n    ON staff_members FOR ALL\r\n    USING (\r\n        EXISTS (\r\n            SELECT 1 FROM staff_members\r\n            WHERE user_id = auth.uid()\r\n            AND role = 'owner'\r\n        )\r\n    );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"organization-members-policies",children:"Organization Members Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Viewing org members\r\nCREATE POLICY \"Org members viewable by authenticated users\"\r\n    ON org_members FOR SELECT\r\n    USING (auth.role() = 'authenticated');\r\n\r\n-- Managing org members\r\nCREATE POLICY \"Org members managed by org owners\"\r\n    ON org_members FOR ALL\r\n    USING (\r\n        EXISTS (\r\n            SELECT 1 FROM org_members\r\n            WHERE user_id = auth.uid()\r\n            AND organization_id = org_members.organization_id\r\n            AND role = 'org_owner'\r\n        )\r\n        OR\r\n        EXISTS (\r\n            SELECT 1 FROM staff_members\r\n            WHERE user_id = auth.uid()\r\n            AND role IN ('owner', 'platform_admin')\r\n        )\r\n    );\n"})}),"\n",(0,s.jsx)(n.h3,{id:"organization-policies",children:"Organization Policies"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Viewing organizations\r\nCREATE POLICY \"Organizations viewable by everyone\"\r\n    ON organizations FOR SELECT\r\n    USING (true);\r\n\r\n-- Managing organizations\r\nCREATE POLICY \"Organizations managed by ROL staff or org owners\"\r\n    ON organizations FOR ALL\r\n    USING (\r\n        EXISTS (\r\n            SELECT 1 FROM staff_members\r\n            WHERE user_id = auth.uid()\r\n            AND role IN ('owner', 'platform_admin')\r\n        )\r\n        OR\r\n        EXISTS (\r\n            SELECT 1 FROM org_members\r\n            WHERE user_id = auth.uid()\r\n            AND organization_id = organizations.id\r\n            AND role = 'org_owner'\r\n        )\r\n    );\n"})}),"\n",(0,s.jsx)(n.h2,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,s.jsx)(n.h3,{id:"role-checking-functions",children:"Role Checking Functions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Check if user is owner\r\nCREATE OR REPLACE FUNCTION is_owner(user_id uuid)\r\nRETURNS boolean AS $$\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1 FROM staff_members\r\n        WHERE user_id = $1\r\n        AND role = 'owner'\r\n    );\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\r\n\r\n-- Check if user is platform admin\r\nCREATE OR REPLACE FUNCTION is_platform_admin(user_id uuid)\r\nRETURNS boolean AS $$\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1 FROM staff_members\r\n        WHERE user_id = $1\r\n        AND (role = 'platform_admin' OR role = 'owner')\r\n    );\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\r\n\r\n-- Check if user can manage team\r\nCREATE OR REPLACE FUNCTION can_manage_team(team_id uuid, user_id uuid)\r\nRETURNS boolean AS $$\r\nBEGIN\r\n    RETURN EXISTS (\r\n        SELECT 1 FROM teams t\r\n        WHERE t.id = $1\r\n        AND (\r\n            -- User is team captain\r\n            t.captain_id = $2\r\n            OR\r\n            -- User is org admin\r\n            EXISTS (\r\n                SELECT 1 FROM staff_members sm\r\n                WHERE sm.user_id = $2\r\n                AND (\r\n                    -- Platform-wide admin\r\n                    sm.role IN ('owner', 'platform_admin')\r\n                    OR\r\n                    -- Org manager for team's organization\r\n                    (sm.role = 'org_manager' AND sm.organization_id = t.organization_id)\r\n                )\r\n            )\r\n        )\r\n    );\r\nEND;\r\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"access-control-matrix",children:"Access Control Matrix"}),"\n",(0,s.jsx)(n.h3,{id:"staff-roles-access",children:"Staff Roles Access"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Role"}),(0,s.jsx)(n.th,{children:"Staff Management"}),(0,s.jsx)(n.th,{children:"Organizations"}),(0,s.jsx)(n.th,{children:"Tournaments"}),(0,s.jsx)(n.th,{children:"Leagues"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"owner"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"Full Access"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"platform_admin"}),(0,s.jsx)(n.td,{children:"Manage non-owners"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"Full Access"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tournament_director"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"View Only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"tournament_coordinator"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"Update Only"}),(0,s.jsx)(n.td,{children:"View Only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"league_director"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"Full Access"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"league_coordinator"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"Update Only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"customer_service"}),(0,s.jsx)(n.td,{children:"None"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"View Only"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"organization-roles-access",children:"Organization Roles Access"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Role"}),(0,s.jsx)(n.th,{children:"Organization"}),(0,s.jsx)(n.th,{children:"Teams"}),(0,s.jsx)(n.th,{children:"Players"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"org_owner"}),(0,s.jsx)(n.td,{children:"Manage"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"View Only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"org_manager"}),(0,s.jsx)(n.td,{children:"View"}),(0,s.jsx)(n.td,{children:"Full Access"}),(0,s.jsx)(n.td,{children:"View Only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"org_staff"}),(0,s.jsx)(n.td,{children:"View"}),(0,s.jsx)(n.td,{children:"View Only"}),(0,s.jsx)(n.td,{children:"View Only"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Row Level Security"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"All tables have RLS enabled"}),"\n",(0,s.jsx)(n.li,{children:"Policies enforce role-based access control"}),"\n",(0,s.jsx)(n.li,{children:"Public data is explicitly allowed through SELECT policies"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security Definer Functions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Helper functions use SECURITY DEFINER"}),"\n",(0,s.jsx)(n.li,{children:"Encapsulate complex permission checks"}),"\n",(0,s.jsx)(n.li,{children:"Provide consistent access control"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Role Hierarchy"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Clear separation between staff and organization roles"}),"\n",(0,s.jsx)(n.li,{children:"Hierarchical permissions structure"}),"\n",(0,s.jsx)(n.li,{children:"Granular access control at each level"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Policy Design"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Policies are role-specific"}),"\n",(0,s.jsx)(n.li,{children:"Separate policies for viewing vs. managing"}),"\n",(0,s.jsx)(n.li,{children:"Organization-specific access controls"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Always use RLS policies"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Never disable RLS"}),"\n",(0,s.jsx)(n.li,{children:"Define explicit policies for each operation"}),"\n",(0,s.jsx)(n.li,{children:"Use helper functions for complex checks"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Role-based access control"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use appropriate role for the task"}),"\n",(0,s.jsx)(n.li,{children:"Follow principle of least privilege"}),"\n",(0,s.jsx)(n.li,{children:"Separate staff and organization permissions"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Security Functions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use helper functions for common checks"}),"\n",(0,s.jsx)(n.li,{children:"Keep functions focused and simple"}),"\n",(0,s.jsx)(n.li,{children:"Document function purposes clearly"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Policy Management"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Regular policy audits"}),"\n",(0,s.jsx)(n.li,{children:"Test policy combinations"}),"\n",(0,s.jsx)(n.li,{children:"Document policy changes"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var i=r(6540);const s={},l=i.createContext(s);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);